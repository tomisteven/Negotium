{"version":3,"sources":["../../src/controllers/client.controller.js"],"names":["createClient","req","res","user_id","user","User","findById","response","client","clientes","find","email","body","status","json","message","push","save","getAllClients","clients","length","getClientConDeuda","clientsConDeuda","filter","deuda","console","log","clientesConDeudaItem","estado","query","clientsItem","items","forEach","item","index","nombre","apellido","clientesSinDeudaItem","getClientSinDeuda","clientSinDeuda","getServicesOfClient","client_id","params","id","_id","services","serviciosadquiridos","getClient","addServiceFuture","nextServices","addService","precio","gastoTotal","updateClient","telefono","deudaTotal","dni","direccion","deleteClient","remove","deleteServiceClient","service_id","service","deleteServiceFutureClient","getServicesFuturesOfClient","loginClient","username","password","updateUsernamePassword","us","urlLoginClient","url"],"mappings":"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","sourcesContent":["\nimport User from \"../models/user\";\nimport {\n    getFiles\n} from \"../utils/images\";\n\n\n\nconst createClient = async (req, res) => {\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n\n    const client = response.clientes.find(client => client.email == req.body.email);\n    if(client){\n        res.status(400).json({message: \"El cliente con ese EMAIL ya existe\"});\n    }else{\n        response.clientes.push(req.body);\n        await response.save();\n        res.status(200).json({message: \"Cliente creado\", client: req.body});\n    }\n};\n\nconst getAllClients = async (req, res) => {\n\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n    //console.log(response);\n     const clients = response.clientes\n    if (clients != null && clients.length > 0) {\n        res.status(200).json(clients);\n    }\n    else {\n        res.status(404).json({message: \"No hay clientes\"});\n    }\n}\n\nconst getClientConDeuda = async (req, res) => {\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const clientsConDeuda = response.clientes.filter(client => client.deuda == true);\n     if (clientsConDeuda != null && clientsConDeuda.length > 0) {\n        res.status(200).json(clientsConDeuda);\n    }\n    else {\n        res.status(404).json({message: \"No hay clientes con deudas\"});\n    }\n    console.log(clientsConDeuda);\n}\n\nconst clientesConDeudaItem = async (req, res) => {\n    const {user_id} = req.user;\n    const estado = req.query.estado;\n\n    const response = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const clientsItem = response.clientes.filter(client => client.deuda === false);\n    const items= []\n    clientsItem.forEach((item, index) => {\n        items.push(\n            item.nombre + \" \" + item.apellido,\n        )\n    })\n    if (items != null ) {\n        res.status(200).json(items);\n    }\n}\nconst clientesSinDeudaItem = async (req, res) => {\n    const {user_id} = req.user;\n    const estado = req.query.estado;\n\n    const response = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const clientsItem = response.clientes.filter(client => client.deuda === true);\n    const items= []\n    clientsItem.forEach((item, index) => {\n        items.push(\n            item.nombre + \" \" + item.apellido,\n        )\n    })\n    if (items != null ) {\n        res.status(200).json(items);\n    }\n}\n\n\n\nconst getClientSinDeuda = async (req, res) => {\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const clientSinDeuda = response.clientes.filter(client => client.deuda == false);\n    if(clientSinDeuda != null && clientSinDeuda.length > 0) res.status(200).json(clientSinDeuda);\n    else res.status(404).json({message: \"No hay clientes con deudas\"});\n\n}\n\nconst getServicesOfClient = async (req, res) => {\n    const client_id = req.params.id;\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n    const client = response.clientes.find(client => client._id == client_id);\n    if(!client) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const services = client.serviciosadquiridos;\n    if(services != null && services.length > 0) res.status(200).json(services);\n    else res.status(404).json({message: \"No hay servicios para este cliente\"});\n}\n\nconst getClient = async (req, res) => {\n    const client_id = req.params.id;\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n    const client = response.clientes.find(client => client._id == client_id);\n    if(client != null) res.status(200).json(client);\n    else res.status(404).json({message: \"No hay cliente con ese id\"});\n}\n\nconst addServiceFuture = async (req, res) => {\n    const client_id = req.params.id;\n    const {user_id} = req.user;\n    const response  = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const client = response.clientes.find(client => client._id == client_id);\n    client.nextServices.push(req.body);\n    await response.save();\n    res.status(200).json({message: \"Servicio añadido\", client: client});\n}\n\nconst addService = async (req, res) => {\n    const client_id = req.params.id;\n    const {user_id} = req.user;\n    const response  = await User.findById(user_id);\n    const client = response.clientes.find(client => client._id == client_id);\n    if(!client) res.status(404).json({message: \"No hay cliente con ese id\"});\n    client.serviciosadquiridos.push(req.body);\n    if(!req.body.precio){\n        res.status(400).json({message: \"El precio es obligatorio\"});\n    }\n    else{\n        client.gastoTotal += req.body.precio;\n    }\n    await response.save();\n    res.status(200).json({message: \"Servicio añadido\", client: client});\n}\n\nconst updateClient = async (req, res) => {\n    const client_id = req.params.id;\n    const {user_id} = req.user;\n    const response = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const client = response.clientes.find(client => client._id == client_id);\n    if(client != null) {\n        client.nombre = req.body.nombre || client.nombre;\n        client.apellido = req.body.apellido || client.apellido;\n        client.telefono = req.body.telefono || client.telefono;\n        client.email = req.body.email || client.email;\n        client.deuda = req.body.deuda || client.deuda;\n        client.deudaTotal = req.body.deudaTotal || client.deudaTotal;\n        client.dni = req.body.dni || client.dni;\n        client.direccion = req.body.direccion || client.direccion;\n        client.gastoTotal = req.body.gastoTotal || client.gastoTotal;\n        client.serviciosadquiridos = req.body.serviciosadquiridos || client.serviciosadquiridos;\n        await response.save();\n        res.status(200).json({message: \"Cliente actualizado\", client: client});\n    }\n    else res.status(404).json({message: \"No hay cliente con ese id\"});\n}\n\nconst deleteClient = async (req, res) => {\n    const client_id = req.params.id;\n    const {user_id} = req.user\n    const response = await User.findById(user_id)\n    console.log(response);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n     const client = response.clientes.find(client => client._id == client_id);\n    if(client != null) {\n        response.clientes.remove(client);\n        await response.save();\n        res.status(200).json({message: \"Cliente eliminado\", client: client});\n    }else res.status(404).json({message: \"No hay cliente con ese id\"});\n}\n\nconst deleteServiceClient = async (req, res) => {\n    const {user_id} = req.user;\n    const client_id = req.params.id;\n    const service_id = req.params.service_id;\n    const response = await User.findById(user_id);\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const client = response.clientes.find(client => client._id == client_id);\n    if(client){\n        const service = client.serviciosadquiridos.find(service => service._id == service_id);\n        if(service != null) {\n            client.serviciosadquiridos.remove(service);\n            await response.save();\n            res.status(200).json({message: \"Servicio eliminado\", client: client});\n        }else res.status(404).json({message: \"No hay servicio con ese id\"});\n    }\n}\n\nconst deleteServiceFutureClient = async (req, res) => {\n    const {user_id} = req.user;\n    const client_id = req.params.id;\n    const service_id = req.params.service_id;\n    const response = await User.findById(user_id);\n    const client = response.clientes.find(client => client._id == client_id);\n    if(client){\n        const service = client.nextServices.find(service => service._id == service_id);\n        if(service != null) {\n            client.nextServices.remove(service);\n            await response.save();\n            res.status(200).json({message: \"Servicio eliminado\", client: client});\n        }else res.status(404).json({message: \"No hay servicio con ese id\"});\n    }\n}\n\nconst getServicesFuturesOfClient = async (req, res) => {\n    const {user_id} = req.user;\n    const client_id = req.params.id;\n    const response = await  User.findById(user_id)\n    if(!response) res.status(404).json({message: \"No hay cliente con ese id\"});\n    const client = response.clientes.find(client => client._id == client_id);\n    if(client != null) res.status(200).json(client.nextServices);\n    else res.status(404).json({message: \"No hay cliente con ese id\"});\n}\n\n//LOGIN CLIENT\n const loginClient = async (req, res) => {\n    //const {user_id} = req.user;\n    const {id} = req.params;\n    const {username, password} = req.body;\n    const response = await User.findById(id);\n    //onsole.log(response);\n     const client = response.clientes.find(client => client.email == username && client.password == password || client.username == username && client.password == password);\n     //console.log(client);\n    if(client != null) res.status(200).json({message: \"Cliente encontrado\", client: client});\n    else res.status(404).json({message: \"Datos ingresados Incorrectos\"});\n}\n\nconst updateUsernamePassword = async (req, res) => {\n    const {user_id} = req.user;\n    const client_id = req.params.id;\n    const response = await User.findById(user_id);\n    const client = response.clientes.find(client => client._id == client_id);\n    if(client != null) {\n        //DEBO BUSCAR QUE EN TODO EL ARREGLO DE LOS CLIENTES EL USUARIO SEA DIFERENTE AL RESTO\n        const us = response.clientes.find(client => client.username == req.body.username);\n        if(us != null) res.status(404).json({message: \"Ya existe un cliente con ese username\"});\n        else {\n            client.username = req.body.username;\n            client.password = req.body.password;\n            await response.save();\n            res.status(200).json({message: \"Cliente actualizado\", client: client});\n        }\n        /* PROBARLO */\n    }\n    else res.status(404).json({message: \"No hay cliente con ese id\"});\n}\n\nconst urlLoginClient = async (req,res) => {\n    const {user_id} = req.user\n    const url = \"http://localhost:3000/client/login/\" + user_id;\n    res.status(200).json({message: \"URL\", url: url});\n}\n\n\nexport {\n    urlLoginClient,\n    createClient,\n    getAllClients,\n    getClient,\n    updateClient,\n    deleteClient,\n    getClientConDeuda,\n    getClientSinDeuda,\n    getServicesOfClient,\n    addServiceFuture,\n    addService,\n    deleteServiceClient,\n    deleteServiceFutureClient,\n    updateUsernamePassword,\n    loginClient,\n    getServicesFuturesOfClient,\n    clientesConDeudaItem,\n    clientesSinDeudaItem,\n}\n"],"file":"client.controller.js"}