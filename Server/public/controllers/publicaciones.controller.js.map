{"version":3,"sources":["../../src/controllers/publicaciones.controller.js"],"names":["createPublicacionAndImage","req","res","body","titulo","descripcion","subtitulo","user_id","user","User","findById","newPublicacion","imagen","localUrl","files","local","cloudinary","v2","uploader","upload","path","public_id","error","result","url","publicaciones","push","save","err","publicacionStored","status","send","message","news","find","i","fs","unlink","console","log","arr","getNews","noticias","deleteNew","id","params","publicacion","_id","destroy","filter","Publicaciones"],"mappings":"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","sourcesContent":["import User from \"../models/user\";\r\nimport { getFiles } from \"../utils/images\";\r\nimport cloudinary from \"cloudinary\";\r\nimport fs from \"fs\";\r\n/* const createPublicacion = async(req, res) => {\r\n    const { title, description, image, subtitulo } = req.body;\r\n    const {user_id} = req.user;\r\n\r\n    const newPublicacion = {\r\n        title,\r\n        description,\r\n        subtitulo,\r\n        localUrl\r\n    }\r\n\r\n    if(req.files.imagen){\r\n        const img = getFiles(req.files.imagen);\r\n        newPublicacion.imagen = img;\r\n    }\r\n\r\n     const user = await User.findById(user_id)\r\n     console.log(user);\r\n     if(!user){\r\n        res.status(404).send({message: \"Usuario no encontrado\"})\r\n    }else{\r\n        user.publicaciones.push(newPublicacion);\r\n        user.save((err, publicacionStored) => {\r\n            if(err){\r\n                res.status(500).send({message: \"Error del servidor\"})\r\n            }else{\r\n                if(!publicacionStored){\r\n                    res.status(404).send({message: \"No se ha encontrado la publicacion\"})\r\n                }else{\r\n\r\n                    //eliminar del servidor\r\n                    const news = user.publicaciones.filter((pdf) => {\r\n                        return pdf._id == publicacionStored.publicaciones[0]._id;\r\n                    });\r\n                    const url = news[0].url;\r\n                    const path = `./uploads/${url}`;\r\n                    fs.unlink(path, (err) => {\r\n                        if(err){\r\n                            console.log(err)\r\n                         }else{\r\n                            console.log(\"Archivo eliminado\")\r\n                        }\r\n                    })\r\n\r\n                    res.status(200).send({code: 200, message: \"Publicacion creada correctamente\", Publicaciones: publicacionStored.publicaciones})\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n} */\r\n\r\n\r\nconst createPublicacionAndImage = async(req, res) => {\r\n    const { titulo, descripcion, subtitulo } = req.body;\r\n    const {user_id} = req.user;\r\n    const user = await User.findById(user_id)\r\n    const newPublicacion = {\r\n        titulo,\r\n        descripcion,\r\n        subtitulo,\r\n        imagen: \"\",\r\n        localUrl: \"\"\r\n    }\r\n    if(req.files.imagen){\r\n        const local = getFiles(req.files.imagen);\r\n        cloudinary.v2.uploader.upload(req.files.imagen.path, { public_id: titulo }, function(error, result) {\r\n            if(result){\r\n                //console.log(result);\r\n                newPublicacion.localUrl = local;\r\n                newPublicacion.imagen = result.url;\r\n                user.publicaciones.push(newPublicacion);\r\n                user.save((err, publicacionStored) => {\r\n                    if(err){\r\n                        res.status(500).send({message: \"Error del servidor\"})\r\n                    }else{\r\n                        if(publicacionStored){\r\n                            //eliminamos del servidor local\r\n                            const news = user.publicaciones.find((i) => {\r\n                                return i.localUrl == local;\r\n                            })\r\n                            const url = news.localUrl;\r\n                            const path = `./uploads/${url}`;\r\n                            fs.unlink(path, (err) => {\r\n                                if(err){\r\n                                    console.log(err)\r\n                                 }else{\r\n                                     res.status(200).send({message: \"Imagen subida correctamente y eliminada local\",arr : publicacionStored.publicaciones})\r\n                                }\r\n                            })\r\n                            //console.log(news);\r\n                        }\r\n                        else{\r\n                            res.status(404).send({message: \"No se ha encontrado la publicacion\"})\r\n                        }\r\n            }\r\n            if(error){\r\n                res.status(500).send({message: \"Error del servidor\", error})\r\n            }\r\n        });\r\n    }\r\n\r\n})}\r\n}\r\n\r\nconst getNews = async (req,res) => {\r\n    const {user_id}  = req.user\r\n    const user = await User.findById(user_id)\r\n    if(!user){\r\n        res.status(404).send({message: \"Usuario no encontrado\"})\r\n    }\r\n    else{\r\n        res.status(200).send({message: \"Noticias encontradas\", noticias: user.publicaciones})\r\n    }\r\n}\r\n\r\nconst deleteNew = async (req, res) => {\r\n    const {user_id} = req.user\r\n    const user = await User.findById(user_id)\r\n    const {id} = req.params\r\n     if(!user){\r\n        res.status(404).send({message: \"Usuario no encontrado\"})\r\n    }\r\n    else{\r\n        const publicacion = user.publicaciones.find((i) => {\r\n            return i._id == id;\r\n        })\r\n        await cloudinary.v2.uploader.destroy(publicacion.titulo, function(error, result) {\r\n            if(error){\r\n                res.status(500).send({message: \"Error del servidor para eliminar de cloudinary\", error})\r\n            }else{\r\n                console.log(result);\r\n            }\r\n        })\r\n        const news = user.publicaciones.filter((i) => {\r\n            return i._id != id;\r\n        })\r\n        user.publicaciones = news;\r\n        user.save((err, publicacionStored) => {\r\n            if(err){\r\n                res.status(500).send({message: \"Error del servidor\"})\r\n            }else{\r\n                if(!publicacionStored){\r\n                    res.status(404).send({message: \"No se ha encontrado la publicacion\"})\r\n                }else{\r\n                    res.status(200).send({message: \"Publicacion eliminada correctamente del servidor y cloudinary\", Publicaciones: publicacionStored.publicaciones})\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport{\r\n    createPublicacionAndImage as testCloudinary,\r\n    getNews, deleteNew\r\n}\r\n\r\n"],"file":"publicaciones.controller.js"}