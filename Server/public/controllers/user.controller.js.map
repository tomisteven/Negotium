{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["getMe","req","res","user_id","user","User","findById","response","status","json","message","createUrlLogin","url_login","save","getAll","role","query","find","getMembresiaActive","membresia","getMembresiaInactive","createUser","password","body","salt","bcrypt","genSaltSync","hash","hashSync","active","_id","console","log","files","avatar","imagePath","err","userStored","send","accessToken","refreshToken","updateUser","id","params","userData","USER","emailExist","email","cloudinary","v2","uploader","destroy","result","upload","path","public_id","url","fs","unlinkSync","findByIdAndUpdate","userUpdate","deleteUser","remove"],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt-nodejs\";\nimport User from '../models/user';\nimport { getFiles } from \"../utils/images\";\nimport {createRefreshToken, createToken, decodedToken} from \"../utils/jwt\";\nimport cloudinary from 'cloudinary';\nimport user from \"../models/user\";\nimport fs from 'fs';\n\n\n\nasync function getMe(req, res) {\n    const {user_id} = req.user;\n    const response = await User.findById(user_id)\n    if (response) res.status(200).json(response);\n    else res.status(404).json({message: \"User not found\"});\n}\nasync function createUrlLogin(req, res) {\n    const {user_id} = req.user;\n    const response = await User.findById(user_id)\n    if (response) {\n        response.url_login = \"http://localhost:3000/login/\"+user_id\n        response.save();\n        res.status(200).json(response);\n    }\n    else  res.status(404).json({message: \"No existe usuario\"});\n}\n\nasync function getAll (req, res) {\n    const {role} = req.query;\n    let response;\n    response = await User.find();\n    response ? res.status(200).json(response) : res.status(404).json({message: \"Users not found\"});\n}\nasync function getMembresiaActive(req, res) {\n    //const {role} = req.query;\n    let response;\n    response = await User.find({membresia: true});\n    response ? res.status(200).json(response) : res.status(404).json({message: \"Users not found\"});\n}\n\nasync function getMembresiaInactive(req, res){\n    const response = await User.find({membresia: false});\n    response ? res.status(200).json(response) : res.status(404).json({message: \"Users not found\"});\n}\n\n  const createUser = async (req, res) => {\n    const {password} = req.body;\n    //console.log(req.body);\n    const salt = bcrypt.genSaltSync(10);\n    const hash = bcrypt.hashSync(password, salt);\n\n    const user = new User({\n        ...req.body,\n        password: hash,\n        active: true,\n        url_login: \"http://localhost:3000/login/\" + req.body._id\n    });\n    console.log(req.body);\n    if(req.files.avatar){\n        const imagePath = getFiles(req.files.avatar);\n        user.avatar = imagePath;\n    }\n    user.save((err, userStored) => {\n        if(err){\n            res.status(500).send({message: \"Error de servidor\"});\n        }else{\n            if(!userStored){\n                res.status(404).send({message: \"Error al crear el usuario\"});\n            }else{\n                res.status(200).send({\n                    message: \"Usuario creado correctamente\",\n                    user: userStored,\n                    accessToken: createToken(userStored),\n                    refreshToken: createRefreshToken(userStored)\n                });\n\n            }\n        }\n    });\n }\n\nconst updateUser = async (req, res) => {\n    const {id} = req.params;\n    const userData = req.body;\n    const USER = await User.findById(id);\n    const emailExist = await User.findById(id);\n    if(emailExist.email == userData.email){\n        res.status(404).send({message: \"El email ya existe\"});\n    }else{\n        //si el usuario envia una nueva contraseña\n        if(userData.password){\n            const salt = bcrypt.genSaltSync(10);\n            const hash = bcrypt.hashSync(userData.password, salt);\n            userData.password = hash;\n        }else{\n            delete userData.password;\n        }\n        //si el usuario envia una nueva imagen\n        if(req.files.avatar){\n            const imagePath = getFiles(req.files.avatar);\n\n             await cloudinary.v2.uploader.destroy(USER.email, (err, result) => {\n                if(err){\n                    res.status(500).send({message: \"Error al eliminar la imagen de cloudinary\"});\n                }\n            });\n\n         await  cloudinary.v2.uploader.upload(req.files.avatar.path, { public_id: USER.email },(err, result) => {\n                if(err){\n                    res.status(500).send({message: \"Error al subir la imagen a cloudinary\"});\n                }else{\n                    userData.avatar = result.url;\n                    fs.unlinkSync(\"./uploads/\" + imagePath, (err) =>{\n                        if(err){\n                            res.status(500).send({message: \"Error al eliminar la imagen del servidor\"});\n                        }\n                    })\n                }\n            });\n\n        }\n\n        await User.findByIdAndUpdate({_id: id}, userData, (err, userUpdate) => {\n            if(err){\n                res.status(500).send({message: \"Error al actualizar el usuario\"});\n            }else{\n                if(!userUpdate){\n                    res.status(404).send({message: \"No se ha encontrado el usuario\"});\n                }else{\n                    res.status(200).send({message: \"Usuario actualizado correctamente\", user: userUpdate});\n                }\n            }\n        })\n    }\n}\n\nconst deleteUser = async (req, res) => {\n    const {id} = req.params\n    //buscamos el usuario\n    const USER = User.findById(id)\n    await User.findById(id, (err, user) => {\n        if(err){\n            res.status(500).send({message: \"Error del servidor\"});\n        }else{\n            if(!user){\n                res.status(404).send({message: \"Usuario no encontrado\"});\n            }else{\n                //eliminamos el usuario\n                user.remove(err => {\n                    if(err){\n                        res.status(500).send({message: \"Error del servidor\"});\n                    }else{\n                        res.status(200).send({message: \"Usuario eliminado correctamente\"});\n                    }\n                })\n            }\n        }\n    });\n    await cloudinary.v2.uploader.destroy(USER.email, (err, result) => {\n        if(err){\n            res.status(500).send({message: \"Error al eliminar la imagen de cloudinary\"});\n        }\n    });\n\n}\n\n\nexport {\n    getMe,\n    getAll,\n    updateUser,\n    deleteUser,\n    getMembresiaActive,\n    getMembresiaInactive,\n    createUser,\n    createUrlLogin\n}\n\n\n"],"file":"user.controller.js"}