{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["register","req","res","body","password","repeatPassword","email","name","lastname","user","User","toLowerCase","role","membresia","files","avatar","cloudinary","v2","uploader","upload","path","public_id","err","resultado","console","log","url","fs","unlinkSync","status","send","message","find","users","emailExist","some","bcrypt","hash","save","userStored","login","findOne","compare","bycriptErr","check","accessToken","refreshToken","token","user_id","_id"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA,IAAMA,QAAQ;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC6CD,GAAG,CAACE,IADjD,EACNC,QADM,aACNA,QADM,EACIC,cADJ,aACIA,cADJ,EACoBC,KADpB,aACoBA,KADpB,EAC2BC,IAD3B,aAC2BA,IAD3B,EACiCC,QADjC,aACiCA,QADjC;AAENC,YAAAA,IAFM,GAEC,IAAIC,gBAAJ,CAAS;AACnBJ,cAAAA,KAAK,EAAEA,KAAK,CAACK,WAAN,EADY;AAEnBJ,cAAAA,IAAI,EAAEA,IAFa;AAGnBC,cAAAA,QAAQ,EAAEA,QAHS;AAInBI,cAAAA,IAAI,EAAE,MAJa;AAKnBC,cAAAA,SAAS,EAAE;AALQ,aAAT,CAFD;;AAAA,iBAUVZ,GAAG,CAACa,KAAJ,CAAUC,MAVA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYHC,uBAAWC,EAAX,CAAcC,QAAd,CAAuBC,MAAvB,CAA8BlB,GAAG,CAACa,KAAJ,CAAUC,MAAV,CAAiBK,IAA/C,EAAqD;AAACC,cAAAA,SAAS,EAACf;AAAX,aAArD,EAAwE,UAACgB,GAAD,EAAMC,SAAN,EAAkB;AAC5FC,cAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAd,cAAAA,IAAI,CAACM,MAAL,GAAcQ,SAAS,CAACG,GAAxB;;AACAC,6BAAGC,UAAH,CAAc3B,GAAG,CAACa,KAAJ,CAAUC,MAAV,CAAiBK,IAA/B,EAAqC,UAACE,GAAD,EAAQ;AACzC,oBAAGA,GAAH,EAAQpB,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,kBAAAA,OAAO,EAAE;AAAV,iBAArB;AACX,eAFD;AAIH,aAPK,CAZG;;AAAA;AAAA;AAAA,mBAqBOrB,iBAAKsB,IAAL,EArBP;;AAAA;AAqBPC,YAAAA,KArBO;AAsBPC,YAAAA,UAtBO,GAsBMD,KAAK,CAACE,IAAN,CAAW,UAAA1B,IAAI;AAAA,qBAAIA,IAAI,CAACH,KAAL,KAAeA,KAAnB;AAAA,aAAf,CAtBN;AAwBb,gBAAG4B,UAAH,EAAehC,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB,EAAf,KACI;AACA,kBAAG,CAAC3B,QAAD,IAAa,CAACC,cAAjB,EAAgC;AAC5BH,gBAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,kBAAAA,OAAO,EAAE;AAAV,iBAArB;AACH,eAFD,MAEK;AACD,oBAAG3B,QAAQ,KAAKC,cAAhB,EAA+B;AAC3BH,kBAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,oBAAAA,OAAO,EAAE;AAAV,mBAArB;AACH,iBAFD,MAEK;AACDK,2CAAOC,IAAP,CAAYjC,QAAZ,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,UAACkB,GAAD,EAAMe,IAAN,EAAe;AAC7C,wBAAGf,GAAH,EAAO;AACHpB,sBAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,wBAAAA,OAAO,EAAE;AAAV,uBAArB;AACH,qBAFD,MAEK;AACDtB,sBAAAA,IAAI,CAACL,QAAL,GAAgBiC,IAAhB;AACA5B,sBAAAA,IAAI,CAAC6B,IAAL,CAAU,UAAChB,GAAD,EAAMiB,UAAN,EAAqB;AAC3B,4BAAGjB,GAAH,EAAO;AACHE,0BAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACApB,0BAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,4BAAAA,OAAO,EAAET;AAAV,2BAArB;AACH,yBAHD,MAGK;AACD,8BAAG,CAACiB,UAAJ,EAAe;AACXrC,4BAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,8BAAAA,OAAO,EAAE;AAAV,6BAArB;AACH,2BAFD,MAEK;AACD7B,4BAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACS,8BAAAA,UAAU,EAAVA;AAAD,6BAArB;AACH;AACJ;AACJ,uBAXD;AAYH;AACJ,mBAlBD;AAmBH;AACJ;AAAC;;AApDO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARvC,QAAQ;AAAA;AAAA;AAAA,GAAd;;;;AAuDA,IAAMwC,KAAK,GAAG,SAARA,KAAQ,CAACvC,GAAD,EAAMC,GAAN,EAAc;AACxB,mBAA0BD,GAAG,CAACE,IAA9B;AAAA,MAAOG,KAAP,cAAOA,KAAP;AAAA,MAAcF,QAAd,cAAcA,QAAd;AAEA,MAAG,CAACE,KAAJ,EAAWJ,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,OAAO,EAAE;AAAV,GAArB;AACX,MAAG,CAAC3B,QAAJ,EAAcF,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,OAAO,EAAE;AAAV,GAArB;;AACdrB,mBAAK+B,OAAL,CAAa;AAACnC,IAAAA,KAAK,EAAEA,KAAK,CAACK,WAAN;AAAR,GAAb,EAA2C,UAACW,GAAD,EAAMiB,UAAN,EAAqB;AAC5D,QAAGjB,GAAH,EAAQpB,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB;AACR,QAAG,CAACQ,UAAJ,EAAgBrC,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB,EAAhB,KACI;AACAK,+BAAOM,OAAP,CAAetC,QAAf,EAAyBmC,UAAU,CAACnC,QAApC,EAA8C,UAACuC,UAAD,EAAaC,KAAb,EAAuB;AACjE,YAAGD,UAAH,EAAezC,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAE;AAAV,SAArB;AACf,YAAG,CAACa,KAAJ,EAAW1C,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAE;AAAV,SAArB,EAAX,KACK7B,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACtBe,UAAAA,WAAW,EAAE,sBAAYN,UAAZ,CADS;AAEtBO,UAAAA,YAAY,EAAE,6BAAmBP,UAAnB,CAFQ,CAGtB;;AAHsB,SAArB;AAMR,OATD;AAUH;AACJ,GAfD;AAkBH,CAvBD;;;;AAyBA,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAAC7C,GAAD,EAAMC,GAAN,EAAc;AAC/B,MAAO6C,KAAP,GAAgB9C,GAAG,CAACE,IAApB,CAAO4C,KAAP;AACA,MAAG,CAACA,KAAJ,EAAW7C,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,OAAO,EAAE;AAAV,GAArB;;AACX,sBAAoB,uBAAagB,KAAb,CAApB;AAAA,MAAQC,OAAR,iBAAQA,OAAR;;AACA,MAAG,CAACA,OAAJ,EAAa9C,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,OAAO,EAAE;AAAV,GAArB,EAAb,KAGI;AACArB,qBAAK+B,OAAL,CAAa;AAACQ,MAAAA,GAAG,EAAED;AAAN,KAAb,EAA6B,UAAC1B,GAAD,EAAMiB,UAAN,EAAqB;AAC9C,UAAGjB,GAAH,EAAQpB,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAE;AAAV,OAArB;AACR,UAAG,CAACQ,UAAJ,EAAgBrC,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAE;AAAV,OAArB,EAAhB,KACI;AACA7B,QAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBe,UAAAA,WAAW,EAAE,sBAAYN,UAAZ,CADI,CAEjB;;AAFiB,SAArB;AAIH;AACJ,KATD;AAUH;AACJ,CAnBD,C,CAyBA","sourcesContent":["import bcrypt from \"bcrypt-nodejs\";\nimport User from \"../models/user\";\nimport {createRefreshToken, createToken, decodedToken} from \"../utils/jwt\";\nimport cloudinary from \"cloudinary\"\nimport fs from \"fs\"\n\n\nconst register = async (req, res) => {\n    const {password, repeatPassword, email, name, lastname} = req.body;\n     const user = new User({\n        email: email.toLowerCase(),\n        name: name,\n        lastname: lastname,\n        role: \"user\",\n        membresia: false\n    });\n\n    if(req.files.avatar){\n        //const imagePath = getFiles(req.files.avatar);\n        await cloudinary.v2.uploader.upload(req.files.avatar.path, {public_id:email}, (err, resultado)=>{\n            console.log(resultado);\n            user.avatar = resultado.url\n            fs.unlinkSync(req.files.avatar.path, (err) =>{\n                if(err) res.status(500).send({message: \"Error al eliminar el archivo de manera local\"});\n            });\n\n        })\n    }\n    const users = await User.find();\n    const emailExist = users.some(user => user.email === email);\n\n    if(emailExist) res.status(404).send({message: \"El email ya existe\"});\n    else{\n        if(!password || !repeatPassword){\n            res.status(404).send({message: \"Las contraseñas son obligatorias\"});\n        }else{\n            if(password !== repeatPassword){\n                res.status(404).send({message: \"Las contraseñas tienen que ser iguales\"});\n            }else{\n                bcrypt.hash(password, null, null, (err, hash) => {\n                    if(err){\n                        res.status(500).send({message: \"Error al encriptar la contraseña\"});\n                    }else{\n                        user.password = hash;\n                        user.save((err, userStored) => {\n                            if(err){\n                                console.log(err);\n                                res.status(500).send({message: err});\n                            }else{\n                                if(!userStored){\n                                    res.status(404).send({message: \"Error al crear el usuario\"});\n                                }else{\n                                    res.status(200).send({userStored});\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        }}\n}\n\nconst login = (req, res) => {\n    const {email, password} = req.body;\n\n    if(!email) res.status(404).send({message: \"El email es obligatorio\"});\n    if(!password) res.status(404).send({message: \"La contraseña es obligatoria\"});\n    User.findOne({email: email.toLowerCase()}, (err, userStored) => {\n        if(err) res.status(500).send({message: \"Error del servidor\"});\n        if(!userStored) res.status(404).send({message: \"Usuario no encontrado\"})\n        else{\n            bcrypt.compare(password, userStored.password, (bycriptErr, check) => {\n                if(bycriptErr) res.status(500).send({message: \"Error del servidor\"});\n                if(!check) res.status(404).send({message: \"La contraseña es incorrecta\"});\n                else res.status(200).send({\n                    accessToken: createToken(userStored),\n                    refreshToken: createRefreshToken(userStored)\n                    //agregue los tokens para que no me de error cuando me creo un usuario nuevo desde un admin\n                });\n\n            });\n        }\n    });\n\n\n}\n\nconst refreshToken = (req, res) => {\n    const {token} = req.body;\n    if(!token) res.status(404).send({message: \"El token requerido\"});\n    const { user_id } = decodedToken(token);\n    if(!user_id) res.status(404).send({message: \"El token es invalido\"});\n\n\n    else{\n        User.findOne({_id: user_id}, (err, userStored) => {\n            if(err) res.status(500).send({message: \"Error del servidor\"});\n            if(!userStored) res.status(404).send({message: \"Usuario no encontrado\"});\n            else{\n                res.status(200).send({\n                    accessToken: createToken(userStored),\n                    //refreshToken: createRefreshToken(userStored)\n                });\n            }\n        });\n    }\n}\n\n\n\n\n\n//exportamos\nexport {\n    register,\n    login,\n    refreshToken\n};\n\n\n"],"file":"auth.controller.js"}