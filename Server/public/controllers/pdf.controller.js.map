{"version":3,"sources":["../../src/controllers/pdf.controller.js"],"names":["createPdf","req","res","user_id","user","body","nombre","servicio","fecha","User","findById","response","pdfs","files","cloudinary","v2","uploader","upload","url","path","public_id","error","result","newPdf","push","save","err","pdfStored","status","send","message","code","pdf","json","getPDFs","get","id","params","filter","_id","deletePdf","newPdfs","fs","unlink","console","log"],"mappings":"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","sourcesContent":["import User from \"../models/user\";\nimport cloudinary from \"cloudinary\";\n\nimport fs from \"fs\";\n\nconst createPdf = async (req, res) => {\n    const { user_id } = req.user;\n    const {nombre, servicio, fecha} = req.body;\n    const response = await User.findById(user_id);\n    const pdfs = response.pdfs;\n        if(req.files){\n            cloudinary.v2.uploader.upload(req.files.url.path, { public_id: nombre }, function(error, result) {\n                const newPdf = {\n                    nombre: nombre,\n                    servicio : servicio,\n                    url: result.url,\n                    fecha: fecha\n                }\n                pdfs.push(newPdf)\n                response.pdfs = pdfs\n                response.save((err, pdfStored) => {\n                    if(err){\n                        res.status(500).send({message: \"Error del servidor\"})\n                    }else{\n                        if(!pdfStored){\n                            res.status(404).send({message: \"No se ha encontrado el pdf\"})\n                        }else{\n                            res.status(200).send({code: 200, message: \"Pdf creado correctamente\", pdf: pdfStored.pdfs})\n                        }\n                    }\n                })\n            })\n        }else{\n            res.status(404).json({message: \"No hay archivos\"})\n        }\n}\n\nconst getPDFs = async (req, res) => {\n    const { user_id } = req.user;\n    const response = await User.findById(user_id);\n    const pdfs = response.pdfs;\n    response ? res.status(200).json(pdfs) : res.status(404).json({message: \"No es un id Valido\"});\n}\n\nconst get = async (req, res) => {\n    const { user_id } = req.user;\n    const id = req.params.id;\n    const response = await User.findById(user_id)\n    const pdfs = response.pdfs\n    const pdf = pdfs.filter((pdf) => {\n         return pdf._id == id;\n    }\n    );\n\n    response ? res.status(200).json(pdf) : res.status(404).json({message: \"No es un id Valido\"});\n}\n\nconst deletePdf = async (req, res) => {\n    const { user_id } = req.user;\n    const id = req.params.id;\n    const response = await User.findById(user_id);\n    const pdfs = response.pdfs;\n    const newPdfs = pdfs.filter((pdf) => {\n        return pdf._id != id;\n    });\n    response.pdfs = newPdfs;\n    const result = await response.save();\n\n    //eliminar del servidor\n    const pdf = pdfs.filter((pdf) => {\n        return pdf._id == id;\n    });\n    const url = pdf[0].url;\n    const path = `./uploads/${url}`;\n    fs.unlink(path, (err) => {\n        if(err){\n            console.log(err)\n        }else{\n            console.log(\"Archivo eliminado\")\n        }\n    })\n    result ? res.status(200).json(result.pdfs) : res.status(404).json({message: \"No es un id Valido\"});\n}\n\n\nexport {\n    createPdf, getPDFs, deletePdf, get\n}"],"file":"pdf.controller.js"}