{"version":3,"sources":["../../src/utils/jwt.js"],"names":["dotenv","config","jwt","require","createToken","user","expToken","Date","setHours","getHours","payload","token_type","user_id","_id","iat","now","exp","getTime","sign","process","env","JWT_SECRET","createRefreshToken","getMonth","decodedToken","token","decode"],"mappings":";;;;;;;;;AAAA;;AACAA,mBAAOC,MAAP;;AAGA,IAAMC,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEQ,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AAClC,MAAMC,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,QAAT,CAAkBF,QAAQ,CAACG,QAAT,KAAsB,EAAxC;AACA,MAAMC,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAE,QADA;AAEZC,IAAAA,OAAO,EAAGP,IAAI,CAACQ,GAFH;AAGZC,IAAAA,GAAG,EAAGP,IAAI,CAACQ,GAAL,EAHM;AAIZC,IAAAA,GAAG,EAAGV,QAAQ,CAACW,OAAT;AAJM,GAAhB;AAOA,SAAOf,GAAG,CAACgB,IAAJ,CAASR,OAAT,EAAkBS,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAAP;AACH,CAXO;;;;AAaD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACjB,IAAD,EAAU;AACxC,MAAMC,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACiB,QAAT,CAAkBjB,QAAQ,CAACiB,QAAT,KAAsB,CAAxC;AACA,MAAMb,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAE,SADA;AAEZC,IAAAA,OAAO,EAAGP,IAAI,CAACQ,GAFH;AAGZC,IAAAA,GAAG,EAAGP,IAAI,CAACQ,GAAL,EAHM;AAIZC,IAAAA,GAAG,EAAGV,QAAQ,CAACW,OAAT;AAJM,GAAhB;AAOA,SAAOf,GAAG,CAACgB,IAAJ,CAASR,OAAT,EAAkBS,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAAP;AACH,CAXM;;;;AAcA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AACnC,SAAOvB,GAAG,CAACwB,MAAJ,CAAWD,KAAX,EAAkBN,OAAO,CAACC,GAAR,CAAYC,UAA9B,EAA0C,IAA1C,CAAP;AACH,CAFM","sourcesContent":["import dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n export const createToken = (user) => {\r\n    const expToken = new Date();\r\n    expToken.setHours(expToken.getHours() + 30);\r\n    const payload = {\r\n        token_type: \"access\",\r\n        user_id : user._id,\r\n        iat : Date.now(),\r\n        exp : expToken.getTime(),\r\n    }\r\n\r\n    return jwt.sign(payload, process.env.JWT_SECRET);\r\n}\r\n\r\nexport const createRefreshToken = (user) => {\r\n    const expToken = new Date();\r\n    expToken.getMonth(expToken.getMonth() + 1);\r\n    const payload = {\r\n        token_type: \"refresh\",\r\n        user_id : user._id,\r\n        iat : Date.now(),\r\n        exp : expToken.getTime(),\r\n    }\r\n\r\n    return jwt.sign(payload, process.env.JWT_SECRET);\r\n};\r\n\r\n\r\nexport const decodedToken = (token) => {\r\n    return jwt.decode(token, process.env.JWT_SECRET, true);\r\n}"],"file":"jwt.js"}